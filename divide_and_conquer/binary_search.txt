Binary Search is defined as a searching algorithm used in a sorted array by repeatedly dividing the search interval in half.
The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(log N).

Binary search compares the target value to the middle element of the array. If they are not equal, the half in which the
target cannot lie is eliminated and the search continues on the remaining half, again taking the middle element to compare to
the target value, and repeating this until the target value is found. If the search ends with the remaining half being empty,
the target is not in the array.

To apply Binary Search algorithm:
1. The data structure must be sorted.
2. Access to any element of the data structure takes constant time.

Pseudo Algorithm for Binary Search

// Given a sorted array A and a key, it search for the key
BinarySearch (A, low, high, key) {
    if (low > high) {
        // Key not present in the given array A
        return
    }
    mid = low + ((high - low) / 2)
    if (key < A[mid]) {
        return BinarySearch(A, low, mid, key)
    } else {
        return BinarySearch(A, mid + 1, high, key)
    }
}

Recurrance Relation:
Since the Algorithm divides the array in 2 parts, (b = 2) and eliminates the other,
with going recursively in only one of those parts,
Recurrance Relation can be written as:
    T(n) = T(n/2) + c, where c is the constant for computing the mid point and comparing it to the given key

Using the Master Theorem, we can solve the Recurrance Relation to get the time complexity as T(n) = O(log n)

Time Complexity:
    Best Case: O(1)
    Average Case: O(log N)
    Worst Case: O(log N)

Auxiliary Space: O(1), If the recursive call stack is considered then the auxiliary space will be O(logN).

Python Code for Binary Search (Recursive Function):

def binary_search_recursive(input_list: list, left_idx: int, right_idx: int, value: int) -> int:
    """Searches an element in a list using Binary Search Algorithm Recursively.

    Args:
        input_list (list): Sorted Input List.
        left_idx (int): Leftmost Index of the input_list.
        right_idx (int): Rightmost Index of the input_list.
        value (int): Element to be searched in the list.

    Returns:
        int: Index Value.
    """

    if left_idx > right_idx:
        return -1

    midpoint_idx = left_idx + ((right_idx - left_idx) // 2)

    if input_list[midpoint_idx] == value:
        return midpoint_idx

    elif input_list[midpoint_idx] < value:
        return binary_search_recursive(input_list=input_list, left_idx=midpoint_idx + 1, right_idx=right_idx, value=value)

    else:
        return binary_search_recursive(input_list=input_list, left_idx=left_idx, right_idx=midpoint_idx - 1, value=value)

Python Code for Binary Search (Iterative Function):

def binary_search_iterative(input_list: list, left_idx: int, right_idx: int, value: int) -> int:
    """Searches an element in a list using Binary Search Algorithm Iteratively.

    Args:
        input_list (list): Sorted Input List.
        left_idx (int): Leftmost Index of the input_list.
        right_idx (int): Rightmost Index of the input_list.
        value (int): Element to be searched in the list.

    Returns:
        int: Index Value.
    """

    while left_idx <= right_idx:
        midpoint_idx = left_idx + ((right_idx - left_idx) // 2)

        if input_list[midpoint_idx] == value:
            return midpoint_idx

        elif input_list[midpoint_idx] < value:
            left_idx = midpoint_idx + 1

        else:
            right_idx = midpoint_idx - 1

    return -1

Advantages of Binary Search:
1. Binary search is faster than linear search, especially for large arrays.
2. More efficient than other searching algorithms with a similar time complexity, such as interpolation search or exponential search.
3. Binary search is well-suited for searching large datasets that are stored in external memory, such as on a hard drive or in the cloud.

Drawbacks of Binary Search:
1. The array should be sorted.
2. Binary search requires that the data structure being searched be stored in contiguous memory locations.
3. Binary search requires that the elements of the array be comparable, meaning that they must be able to be ordered.

Applications of Binary Search:
1. Binary search can be used as a building block for more complex algorithms used in machine learning, such as algorithms for training
    neural networks or finding the optimal hyperparameters for a model.
2. It can be used for searching in computer graphics such as algorithms for ray tracing or texture mapping.
3. It can be used for searching a database.